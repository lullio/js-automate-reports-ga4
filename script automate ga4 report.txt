
var retrievedObject = JSON.parse(localStorage.getItem('backup'));
// regex
let regexPageDimensionOficial = /Nome do evento|É um evento de conversão/gi;
let regexPageMetricsOficial = /Valor do evento/gi;
// let regexPageDimensionOficial = /source \/ medium|link url|page title|page path +|landing page|page referrer|page location/gi;
// let regexPageMetricsOficial = /^views$|event count per user|events per session|session|engage|total users|new users|returning users|user conversion rate|conversions|bounce rate|exits/gi;

/*Botão + de adicionar métrica, dimensão e Segmentos
*/
let dimensionSelector = '.dimension-chip-list [aria-label="Add dimension"],.dimension-chip-list [aria-label="Adicionar dimensão"]';
let metricSelector = '.metric-chip-list [aria-label="Add metric"],.metric-chip-list [aria-label="Adicionar métrica"]';
let segmentSelector = '.segment-chip-list [aria-label="Add segment"],.segment-chip-list [aria-label="Adicionar segmento"]';

/* capturar todos "botões" de soltar e arrastar
*/
let allBtnSelectors = document.querySelectorAll('dropzone-box');
// [0] = comparações de Segmentos
// [1] = linhas - soltar dimensão
// [2] = colunas - soltar dimensão
// [3] = valores - soltar métrica
// [4] = filtros - soltar filtro
// let btnSelectorRowDimension = '.with-row-controls .dropzone-box-droppable-container .droppable-element'; // document.querySelectorAll[0]
// let btnSelectorColumnDimension = '.with-row-controls .dropzone-box-droppable-container .droppable-element'; // document.querySelectorAll[1]

///! ou selecionando os botoes individuais(melhor), com o método acima tive problema nas colunas onde o limite é 2, ai o botao desaparece, a conta fica errada
// botao soltar ou selecionar segmento
document.querySelectorAll('concept-chip-list[guided-help-id="segment-comparison"] dropzone-box');
// LINHA - botao soltar ou selecionar dimensao
document.querySelectorAll('concept-chip-list[title-text="Linhas"] dropzone-box,concept-chip-list[title-text="Rows"] dropzone-box')
// COLUNA - botao soltar ou selecionar dimensao
document.querySelectorAll('concept-chip-list[title-text="Colunas"] dropzone-box,concept-chip-list[title-text="Columns"] dropzone-box')
// VALORES - botao soltar ou selecionar metrica
document.querySelectorAll('concept-chip-list[title-text="Valores"] dropzone-box,concept-chip-list[title-text="Values"] dropzone-box')
// FILTROS - botao soltar ou selecionar dimensao ou metrica
document.querySelectorAll('concept-chip-list[title-text="Filtros"] dropzone-box,concept-chip-list[title-text="Filters"] dropzone-box')

async function addDimensionsMetrics(){
    await delay(2500);
    // executar function para adicionar dimensões
    adicionarFields(dimensionSelector, retrievedObject[0].dimensoes.strRegex)
    await delay(2500);
    // executar function para adicionar métricas
    adicionarFields(metricSelector, retrievedObject[0].metricas.strRegex);
}addDimensionsMetrics();







/*  Selecionar Linhas 
 PARA REFERÊNCIA:
// botão arrastar dimension LINHA
var btnDropDimension = document.querySelectorAll('.with-row-controls .dropzone-box-droppable-container .droppable-element')[0]
// botão arrastar dimension COLUNA
var btnDropMetric = document.querySelectorAll('.with-row-controls .dropzone-box-droppable-container')[1]
*/

// linhas dimensoes
//TOP FUNCIONAL, mas to usando async por isso comentei
/* 
setTimeout(function() {
    // adicionarFields(metricSelector, regexPageMetricsOficial);
    selecionarDados('dropzone-box', 1, ["É um evento de conversão", "Nome do evento"])
    setTimeout(function() {
        selecionarDados('dropzone-box', 2, ["É um evento de conversão", "Nome do evento"])
    }, 1000)
    selecionarDados('dropzone-box', 3, ["Valor do evento"])
}, 2000)
setTimeout(function() {
    // adicionarFields(metricSelector, regexPageMetricsOficial);
    selecionarDados('dropzone-box', 2, ["É um evento de conversão", "Nome do evento"])
}, 3500)
setTimeout(function() {
    // adicionarFields(metricSelector, regexPageMetricsOficial);
    selecionarDados('dropzone-box', 3, ["Valor do evento"])
}, 5000)
*/

async function aplicarDados(){
    // adicionarFields(metricSelector, regexPageMetricsOficial);
    var retrievedObject = JSON.parse(localStorage.getItem('backup'));
    await delay(1500);
    // linha
    selecionarDados('dropzone-box', 1, retrievedObject[0].linhas.arr)
    await delay(2000);
    // coluna
    selecionarDados('dropzone-box', 2, retrievedObject[0].colunas.arr)
    await delay(3000);
    // filtros
    selecionarDados('concept-chip-list[title-text="Filtros"] dropzone-box,concept-chip-list[title-text="Filters"] dropzone-box', 0, ["Valor do evento"])
}aplicarDados()
async function selecionarDados(btnCSSelector, btnCSSelectorPosition, selectListData){
        // clique no botão "soltar ou selecionar dimensão"
        // btnCSSelector = 'dropzone-box';
        await delay(2000);
        // array com a lista de nomes/metricas/dimensoes/etc
        selectListData.forEach((val, i) => {
            // selecionar dimensão do dropdown que aparece, lista de dimensões
            waitForElmModified(btnCSSelector).then((elm) => {
                // console.log(elm)
                // alert(elm)
                // clique no botão "soltar ou selecionar dimensão"
                elm[btnCSSelectorPosition]?.firstElementChild?.click(); // clique no primeiro item do array (é a LINHA)
            });
            btnOptionNameList = `button.context-menu-button[role="menuitem"][aria-label="${selectListData[i]}"]`
            waitForElm(btnOptionNameList).then((elm) => {
                // console.log(elm)
                elm?.click();
                // elm.dispatchEvent(new Event("input", { bubbles: true }))
            });
        })
        await delay(1000);
        document.querySelectorAll('control-panel-text-input input[data-event-action=ChangeStartRow]')[0].value = 5; document.querySelectorAll('control-panel-text-input input[data-event-action=ChangeStartRow]')[0].dispatchEvent(
            new Event("input", { bubbles: true }))
}


/* 
FUNCTION ADICIONAR MÉTRICAS E DIMENSÕES
SELECIONAR MÉTRICAS E DIMENSOES
*/
function adicionarFields(selector, regex){
    // 1. CLIQUE NO ÍCONE + de select dimensions
    waitForElm(selector).then((elm) => {
        elm.click();
    });

    // 2. CLIQUE NO LINK expand all
    waitForElm('.expand-all-button').then((elm) => {
        elm.click();
    });

        // 3. CLIQUE NOS CHECKBOXES - marcar/selecionar dimensoes
        waitForElm('.first-col-value').then((elm) => {
            document.querySelectorAll('.first-col-value').forEach(val => {
            if(val.textContent.trim().search(regex) !== -1){
                //console.log(val)
                // clicar
                val.click();
            }
        })
        });
        // 4. CLIQUE NO BOTÃO IMPORT
        waitForElm('.confirm-button.mdc-button').then((elm) => {
            elm.click();
        });
}

/* 
FUNCTION ESPERAR O ELEMENTO EXISTIR
*/
// alterei para querySelectorAll, para retornar lista...
function waitForElmModified(selector) {
    return new Promise(resolve => {
        if (document.querySelectorAll(selector)) {
            return resolve(document.querySelectorAll(selector));
        }
  
        const observer = new MutationObserver(mutations => {
            if (document.querySelectorAll(selector)) {
                resolve(document.querySelectorAll(selector));
                observer.disconnect();
            }
        });
  
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    });
}

function waitForElm(selector) {
    return new Promise(resolve => {
        if (document.querySelector(selector)) {
            return resolve(document.querySelector(selector));
        }
  
        const observer = new MutationObserver(mutations => {
            if (document.querySelector(selector)) {
                resolve(document.querySelector(selector));
                observer.disconnect();
            }
        });
  
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    });
}

function delay(milliseconds){
    return new Promise(resolve => {
        setTimeout(resolve, milliseconds);
    });
 }


/* BOTOES E CAPTURAS - BACKUP
*/
// ÍCONE + de select dimensions
var addDimension = document.querySelector('.dimension-chip-list [aria-label="Add dimension"]')

// ÍCONE + de select metrics
var addMetric = document.querySelector('.mtric-chip-list [aria-label="Add metric"]')

// Link para Expand all compatibles
var expandAll = document.querySelector('.expand-all-button');



/*All Pages & Landing Pages Reports*/
let regexPageDimension = /source \/ medium|link url|page title|page path +|landing page|page referrer|page location/gi;
let regexPageMetrics = /^views$|event count per user|events per session|session|engage|total users|new users|returning users|user conversion rate|conversions|bounce rate|exits/gi;

/*Top Events*/
let regexTopEventsDimension = /^source \/ medium$|link url|page title|page path +|landing page|page referrer|Outbound/gi;
let regexTopEventsMetrics = /^event count$|event count per user|events per session|^session$|engage|total users|new users|returning users|user conversion rate|conversions|user engagement/gi;

// Selecionar Dimensões
/*
document.querySelectorAll('.first-col-value').forEach(val => {
    // se a dimensão tiver o texto tal.. (formatei o texto para ficar minusculo)
    let regexDimension = /source \/ medium|link url|page title|page path +|landing page|page referrer|page location/gi;
    if(val.textContent.trim().toLowerCase().search(regexDimension) !== -1){
        //console.log(val)
        // clicar
        val.click();
    }
})
*/


// botão arrastar dimension / drop or select dimension [ROW]
// var btnDropDimension = document.querySelectorAll('.with-row-controls .dropzone-box-droppable-container .droppable-element')[0]
// var btnDropMetric = document.querySelectorAll('.with-row-controls .dropzone-box-droppable-container')[1]


// marca e desmarca td a cada 2s kk
//setInterval(function () {adicionarFields(metricSelector, regexPageMetrics)}, 2000);

// Botão Import
var btnImport = document.querySelector('.confirm-button.mdc-button')


// botão arrastar dimension / drop or select dimension [ROW]
var btnDropDimension = document.querySelectorAll('.with-row-controls .dropzone-box-droppable-container .droppable-element')[0]
var btnDropMetric = document.querySelectorAll('.with-row-controls .dropzone-box-droppable-container')[1]