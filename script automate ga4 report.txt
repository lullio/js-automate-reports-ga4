// var retrievedObject = JSON.parse(localStorage.getItem("backup"));
// // regex
// let regexPageDimensionOficial = /Nome do evento|É um evento de conversão/gi;
// let regexPageMetricsOficial = /Valor do evento/gi;

// let regexPageDimensionOficial = /source \/ medium|link url|page title|page path +|landing page|page referrer|page location/gi;
// let regexPageMetricsOficial = /^views$|event count per user|events per session|session|engage|total users|new users|returning users|user conversion rate|conversions|bounce rate|exits/gi;

/*Botão + de adicionar métrica, dimensão e Segmentos
 */
let dimensionSelector =
  '.dimension-chip-list [aria-label="Add dimension"],.dimension-chip-list [aria-label="Adicionar dimensão"]';
let metricSelector =
  '.metric-chip-list [aria-label="Add metric"],.metric-chip-list [aria-label="Adicionar métrica"]';
let segmentSelector =
  '.segment-chip-list [aria-label="Add segment"],.segment-chip-list [aria-label="Adicionar segmento"]';

/* capturar todos "botões" de soltar e arrastar
 */
// let allBtnSelectors = document.querySelectorAll("dropzone-box");
// [0] = comparações de Segmentos
// [1] = linhas - soltar dimensão
// [2] = colunas - soltar dimensão
// [3] = valores - soltar métrica
// [4] = filtros - soltar filtro
// let btnSelectorRowDimension = '.with-row-controls .dropzone-box-droppable-container .droppable-element'; // document.querySelectorAll[0]
// let btnSelectorColumnDimension = '.with-row-controls .dropzone-box-droppable-container .droppable-element'; // document.querySelectorAll[1]

///! ou selecionando os botoes individuais(melhor), com o método acima tive problema nas colunas onde o limite é 2, ai o botao desaparece, a conta fica errada
/*
// botao soltar ou selecionar segmento
document.querySelectorAll(
  'concept-chip-list[guided-help-id="segment-comparison"] dropzone-box'
);
// LINHA - botao soltar ou selecionar dimensao
document.querySelectorAll(
  'concept-chip-list[title-text="Linhas"] dropzone-box,concept-chip-list[title-text="Rows"] dropzone-box'
);
// COLUNA - botao soltar ou selecionar dimensao
document.querySelectorAll(
  'concept-chip-list[title-text="Colunas"] dropzone-box,concept-chip-list[title-text="Columns"] dropzone-box'
);
// VALORES - botao soltar ou selecionar metrica
document.querySelectorAll(
  'concept-chip-list[title-text="Valores"] dropzone-box,concept-chip-list[title-text="Values"] dropzone-box'
);
// FILTROS - botao soltar ou selecionar dimensao ou metrica
document.querySelectorAll(
  'concept-chip-list[title-text="Filtros"] dropzone-box,concept-chip-list[title-text="Filters"] dropzone-box'
);
*/
/* 
    PRINCIPAL, QTD DE TABS
*/
var retrievedObject = JSON.parse(localStorage.getItem("backup"));
for (index = 0; index <= retrievedObject.length; index++) {
  /*FUNÇÕES

*/
  /* 
    ADICIONAR MÉTRICAS E DIMENSÕES
*/
  async function addDimensionsMetrics() {
    await delay(2500);
    // executar function para adicionar dimensões
    // somente se tiver menos que 5 dimensoes ja adicionadas
    if (
      document.querySelectorAll(
        ".data-panel-concept-list.dimension-chip-list form"
      ).length <= 5
    ) {
      adicionarFields(
        dimensionSelector,
        retrievedObject[index].dimensoes.arr
      );
    }
    await delay(5000);
    if (
      document.querySelectorAll(
        ".data-panel-concept-list.metric-chip-list form"
      ).length <= 5
    ) {
      // executar function para adicionar métricas
      adicionarFields(metricSelector, retrievedObject[index].metricas.arr);
    }
  }

  /*  Selecionar Linhas 
 PARA REFERÊNCIA:
// botão arrastar dimension LINHA
var btnDropDimension = document.querySelectorAll('.with-row-controls .dropzone-box-droppable-container .droppable-element')[0]
// botão arrastar dimension COLUNA
var btnDropMetric = document.querySelectorAll('.with-row-controls .dropzone-box-droppable-container')[1]
*/

  // linhas dimensoes
  //TOP FUNCIONAL, mas to usando async por isso comentei
  /* 
setTimeout(function() {
    // adicionarFields(metricSelector, regexPageMetricsOficial);
    selecionarDados('dropzone-box', 1, ["É um evento de conversão", "Nome do evento"])
    setTimeout(function() {
        selecionarDados('dropzone-box', 2, ["É um evento de conversão", "Nome do evento"])
    }, 1000)
    selecionarDados('dropzone-box', 3, ["Valor do evento"])
}, 2000)
setTimeout(function() {
    // adicionarFields(metricSelector, regexPageMetricsOficial);
    selecionarDados('dropzone-box', 2, ["É um evento de conversão", "Nome do evento"])
}, 3500)
setTimeout(function() {
    // adicionarFields(metricSelector, regexPageMetricsOficial);
    selecionarDados('dropzone-box', 3, ["Valor do evento"])
}, 5000)
*/

  /*
    ADICIONAR LINHAS E COLUNAS
*/

  // selecionarFiltros();

  // filtros
  // selecionarDados('concept-chip-list[title-text="Filtros"] dropzone-box,concept-chip-list[title-text="Filters"] dropzone-box', 0, retrievedObject[1].filtros.oficial)

  async function selecionarDados(
    btnCSSelector,
    btnCSSelectorPosition,
    selectListData,
    tipoDeDado
  ) {
    // clique no botão "soltar ou selecionar dimensão"
    // btnCSSelector = 'dropzone-box';
    // await delay(2000);
    // array com a lista de nomes/metricas/dimensoes/etc
    // selecionar dimensão do dropdown que aparece, lista de dimensões
    // a lista de todos items que aparece ao clicar no botao soltar ou selecionar

    // quantidade de dimensoes/metricas que tem no array, clicar no botoes a quantidade de vezes = quantidade de dimensoes/metricas para adicionar nas linhas/colunas/etc

    // todas dimensoes que existem na coluna dimensoes.. troquei de estrategia , ao inves de pegar as dimensoes somente ao clicar no botão selecionar dimensao, estou pegando todas que existem
    var xx = document.querySelectorAll(
      ".data-panel-concept-list.dimension-chip-list form .concept-chip-text"
    );
    var dado_ptbr = "";
    var dado_enus = "";
    if (tipoDeDado == "linha") {
      dado_ptbr = "Linhas";
      dado_enus = "Rows";
    } else if (tipoDeDado == "coluna") {
      dado_ptbr = "Colunas";
      dado_enus = "Columns";
    } else if (tipoDeDado == "valor") {
      dado_ptbr = "Valores";
      dado_enus = "Values";
      xx = document.querySelectorAll(
        ".data-panel-concept-list.metric-chip-list form .concept-chip-text"
      );
    }
    var xy = "";
    for (let x = 1; x <= selectListData.length; x++) {
      await delay(200);

      //   var xx = document.querySelectorAll(
      //     'button.context-menu-button[role="menuitem"][aria-label]'
      //   );
      // quantidade de textos no array das dimensoes/metricas

      for (let texto of selectListData) {
        // await delay(200);
        // todas as metricas/dimensoes que aparecem para escolher ao clicar no botao
        for (let [botaoIndex0, botaoValue0] of xx.entries()) {
          // alert(botaoValue0.getAttribute("aria-label").trim())
          // alert(texto)
          // await delay(200);
          document
            .querySelectorAll(
              `concept-chip-list[title-text="${dado_ptbr}"] form .concept-chip-text,concept-chip-list[title-text="${dado_enus}"] form .concept-chip-text`
            )
            .forEach((vala) => {
              xy += vala.textContent.trim() + ",";
            });

          // await delay(500);
          if (
            botaoValue0?.textContent?.trim() == texto?.trim() &&
            !xy.includes(texto.trim())
          ) {
            // alert(xy)
            // alert(texto?.trim())
            // await delay(200);
            await waitForElmModified(btnCSSelector).then((elm) => {
              elm[btnCSSelectorPosition]?.firstElementChild?.click();
            });
            // await delay(200);
            await waitForElmModified(
              'button.context-menu-button[role="menuitem"][aria-label]'
            ).then((elm) => {
              document
                .querySelector(
                  `button.context-menu-button[role="menuitem"][aria-label='${texto.trim()}']`
                )
                ?.click();
            });
            console.log(botaoValue0);
            // botaoValue0?.click();
            // await delay(700);
            // xx[botaoIndex0] = ""
            // botaoValue0 = ""
          }
        }
      }
    }

    //   for (x of xx) {
    //     if (x.getAttribute("aria-label").trim().search(selectListData) !== -1) {
    //       // waitForElm(x).then((elm) => {
    //       // console.log(elm)
    //        x?.click();
    //       // elm.dispatchEvent(new Event("input", { bubbles: true }))
    //       // });
    //     }
    //   }
    //   alert(retrievedObject[index].tabName)
    // await delay(1000);
    // document.querySelectorAll('control-panel-text-input input[data-event-action=ChangeStartRow]')[0].value = 5; document.querySelectorAll('control-panel-text-input input[data-event-action=ChangeStartRow]')[0].dispatchEvent(
    //     new Event("input", { bubbles: true }))
  }
  async function aplicarDados() {
    // adicionarFields(metricSelector, regexPageMetricsOficial);
    // linha
    // await delay(2000);
    // selecionarDados('dropzone-box', 1, /Gênero|Saída|URL do link|client|button_url|link_text|step|flow|button_text|Plataforma/gi)
    // await delay(2000)
    //     selecionarDados(
    //         'concept-chip-list[title-text="Linhas"] dropzone-box,concept-chip-list[title-text="Rows"] dropzone-box',
    //         0,
    //     retrievedObject[index].linhas.str.replace(",", "|")
    //   );
    selecionarDados(
      'concept-chip-list[title-text="Linhas"] dropzone-box,concept-chip-list[title-text="Rows"] dropzone-box',
      0,
      retrievedObject[index].linhas.arr,
      "linha"
    );
    await delay(500);
    // coluna
    //   selecionarDados(
    //     'concept-chip-list[title-text="Colunas"] dropzone-box,concept-chip-list[title-text="Columns"] dropzone-box',
    //     0,
    //     retrievedObject[index].colunas.str.replace(",", "|")
    //   );
    selecionarDados(
      'concept-chip-list[title-text="Colunas"] dropzone-box,concept-chip-list[title-text="Columns"] dropzone-box',
      0,
      retrievedObject[index].colunas.arr,
      "coluna"
    );
    await delay(500);
    // await delay(5000);
    //valores
    selecionarDados(
      'concept-chip-list[title-text="Valores"] dropzone-box,concept-chip-list[title-text="Values"] dropzone-box',
      0,
      retrievedObject[index].valores.arr,
      "valor"
    );
    await delay(500);
    // filtros
  }
  async function selecionarFiltros() {
    // clique no botão "soltar ou selecionar dimensão"
    // btnCSSelector = 'dropzone-box';
    // await delay(2000);
    // array com a lista de nomes/metricas/dimensoes/etc
    // selecionar dimensão do dropdown que aparece, lista de dimensões
    // a lista de todos items que aparece ao clicar no botao soltar ou selecionar
    // await waitForElmModified('concept-chip-list[title-text="Filtros"] dropzone-box,concept-chip-list[title-text="Filters"]').then((elm) => {
    //     // console.log(elm)
    //     // alert(elm)
    //     // clique no botão "soltar ou selecionar dimensão"
    //     elm[0]?.firstElementChild?.click(); // clique no primeiro item do array (é a LINHA)
    // });
    
    // alert('hi')
    var filtros = retrievedObject[index].filtros.oficial;
    var qtdFiltros = retrievedObject[index].filtros.oficial.length;
    var soma="";
    for (let [filtroTexto1, filtroTexto2, filtroTexto3] of filtros) {
      await delay(2000);
      // botão adicionar filter
      waitForElmModified(
        'concept-chip-list[title-text="Filtros"] dropzone-box,concept-chip-list[title-text="Filters"]'
      ).then((elm) => {
        elm[0].firstElementChild.click(); // clique no primeiro item do array (é a LINHA)
      });
      await delay(2000);
      // captura texto de todas correspondeicas
      var xx
      waitForElmModified(
        'button.context-menu-button[role="menuitem"][aria-label]'
      ).then((elm) => {
        xx = document.querySelectorAll(
            'button.context-menu-button[role="menuitem"][aria-label]'
          );
      });
 
      await delay(2000);
        // captura texto de todas correspondeicas regex, igual a, contem...
       
      for (let [botaoIndex, botaoValue] of xx.entries()) {
          /*selecionar dimensao/metrica do filtro
            
          */
          document.querySelectorAll('filter-chip-list-settings-adapter .concept-chip span').forEach(val => {
              soma+= val.getAttribute('aria-label');
          })
          if (
            botaoValue?.getAttribute("aria-label")?.trim() ==
            filtroTexto1.trim() && !soma.includes(filtroTexto1.trim())
          ) {
            await delay(1000);
            botaoValue.click();
            await delay(1500);

            /*selecionar correspondencia
            
            */
            //clicar no dropdown
            await delay(1000);
            waitForElm("[name=filterForm] md-select.ng-invalid").then((elm) => {
              elm.click(); 
            });
            await delay(2000);
            /*selecionar correspondencia
            
            */
              for (let [index, val] of document.querySelectorAll('md-option[ng-repeat*="matchType"]').entries()) {
                if (
                  val?.textContent
                    ?.replace(/\n*|\r*|\t*|\s{2,}/gi, "")
                    .trim() == filtroTexto2.trim()){
                  // waitForElm(x).then((elm) => {
                  // console.log(elm)
                  await delay(2000);
                  val.click();
                  // elm.dispatchEvent(new Event("input", { bubbles: true }))
                  // });
                  await delay(2000);
                }
            }
            /*inserir texto no input e salvar / insira a expressão
            
            */
            await delay(1000);
            waitForElm("filter-menu input").then((elm) => {
              document.querySelectorAll('filter-menu input.ng-empty')[0].value = filtroTexto3; // clique no primeiro item do array (é a LINHA)
              document.querySelectorAll('filter-menu input.ng-empty')[0].dispatchEvent(
                new Event("input", {
                  bubbles: true,
                  detail: { text: () => filtroTexto3 },
                })
              ); // google ñ valida valor de input inserido programaticamente
              
             });
              await delay(2000);
              /*clicar no botão aplicar
            
            */
                waitForElmModified('filter-menu button[type=submit]').then((elm) => {
                  var botoesAplicar = document.querySelectorAll('filter-menu button[type=submit]');
                  elm[botoesAplicar.length-1].click();
                });
                await delay(2000);
          }
        }
            
      await delay(1500);
    }
  }

  /* 
FUNCTION ADICIONAR MÉTRICAS E DIMENSÕES
SELECIONAR MÉTRICAS E DIMENSOES
*/
 async function adicionarFields(selector, arra) {
    // 1. CLIQUE NO ÍCONE + de select dimensions
    waitForElm(selector).then((elm) => {
      elm.click();
    });
    await delay(2000)
    // 2. CLIQUE NO LINK expand all
    waitForElm(".expand-all-button").then((elm) => {
      elm.click();
    });
    await delay(2000)
    // 3. CLIQUE NOS CHECKBOXES - marcar/selecionar dimensoes
    waitForElm(".first-col-value").then((elm) => {
        for (let [botaoIndex0, botaoValue0] of document.querySelectorAll(".first-col-value").entries()) {
            // alert(botaoValue0)
            for(textoDim of arra){
                // alert(botaoValue0.textContent.trim())
                // alert(textoDim.trim())
                if (botaoValue0.textContent.trim() == textoDim.trim()) {
                    //console.log(val)
                    // clicar
                    botaoValue0.click();
                  }
            }
        }

    //   document.querySelectorAll(".first-col-value").forEach((val) => {
    //     // alert(regex)
    //     // alert(val.textContent.trim())
    //     if (val.textContent.trim().search(regex) !== -1) {
    //       //console.log(val)
    //       // clicar
    //       val?.click();
    //     }
    //   });
    });
    await delay(2000)
    // 4. CLIQUE NO BOTÃO IMPORT
    waitForElm(".confirm-button.mdc-button").then((elm) => {
      elm?.click();
    });
    await delay(2000)
  }

  /* 
FUNCTION ESPERAR O ELEMENTO EXISTIR
*/
  // alterei para querySelectorAll, para retornar lista...
  function waitForElmModified(selector) {
    return new Promise((resolve) => {
      if (document.querySelectorAll(selector)) {
        return resolve(document.querySelectorAll(selector));
      }

      const observer = new MutationObserver((mutations) => {
        if (document.querySelectorAll(selector)) {
          resolve(document.querySelectorAll(selector));
          observer.disconnect();
        }
      });

      observer.observe(document.body, {
        childList: true,
        subtree: true,
      });
    });
  }

  function waitForElm(selector) {
    return new Promise((resolve) => {
      if (document.querySelector(selector)) {
        return resolve(document.querySelector(selector));
      }

      const observer = new MutationObserver((mutations) => {
        if (document.querySelector(selector)) {
          resolve(document.querySelector(selector));
          observer.disconnect();
        }
      });

      observer.observe(document.body, {
        childList: true,
        subtree: true,
      });
    });
  }

  function delay(milliseconds) {
    return new Promise((resolve) => {
      setTimeout(resolve, milliseconds);
    });
  }

  /*EXECUTAR FUNÇÕES
  
  
  */

  await delay(1500);
  addDimensionsMetrics();
  await delay(1500);
  aplicarDados();
  await delay(8000);
  selecionarFiltros()

  await delay(55000);

  /*  CRIAR NOVA TAB

    */
  // clicar em + para adicionar tab
  document
    .querySelectorAll('button[data-guidedhelpid="step-selector-add-step"]')[0]?.click();
  await delay(1000);
  // escolher o formato livre, relatorio free form
  document
    .querySelectorAll(
      '.context-menu-group button[aria-label="Formato livre"], .context-menu-group button[aria-label="Free form"]'
    )[0]?.click();
    await delay(2000);

  // adiiconar o nome da tab, input.value - mudar o nome da tab
  document.querySelectorAll(".input-label.step-name > input")[0].value =
    retrievedObject[index].tabName;
    await delay(500);
  document.querySelectorAll(".input-label.step-name > input")[0].dispatchEvent(
    new Event("input", {
      bubbles: true,
      detail: { text: () => retrievedObject[index].tabName },
    })
  ); // google
  await delay(1500);
} //fim do for das tabs

/* BOTOES E CAPTURAS - BACKUP
 */
// ÍCONE + de select dimensions
// var addDimension = document.querySelector(
//   '.dimension-chip-list [aria-label="Add dimension"]'
// );

// // ÍCONE + de select metrics
// var addMetric = document.querySelector(
//   '.mtric-chip-list [aria-label="Add metric"]'
// );

// // Link para Expand all compatibles
// var expandAll = document.querySelector(".expand-all-button");

// /*All Pages & Landing Pages Reports*/
// let regexPageDimension =
//   /source \/ medium|link url|page title|page path +|landing page|page referrer|page location/gi;
// let regexPageMetrics =
//   /^views$|event count per user|events per session|session|engage|total users|new users|returning users|user conversion rate|conversions|bounce rate|exits/gi;

// /*Top Events*/
// let regexTopEventsDimension =
//   /^source \/ medium$|link url|page title|page path +|landing page|page referrer|Outbound/gi;
// let regexTopEventsMetrics =
//   /^event count$|event count per user|events per session|^session$|engage|total users|new users|returning users|user conversion rate|conversions|user engagement/gi;

// Selecionar Dimensões
/*
document.querySelectorAll('.first-col-value').forEach(val => {
    // se a dimensão tiver o texto tal.. (formatei o texto para ficar minusculo)
    let regexDimension = /source \/ medium|link url|page title|page path +|landing page|page referrer|page location/gi;
    if(val.textContent.trim().toLowerCase().search(regexDimension) !== -1){
        //console.log(val)
        // clicar
        val.click();
    }
})
*/

// botão arrastar dimension / drop or select dimension [ROW]
// var btnDropDimension = document.querySelectorAll('.with-row-controls .dropzone-box-droppable-container .droppable-element')[0]
// var btnDropMetric = document.querySelectorAll('.with-row-controls .dropzone-box-droppable-container')[1]

// marca e desmarca td a cada 2s kk
//setInterval(function () {adicionarFields(metricSelector, regexPageMetrics)}, 2000);

// Botão Import
// var btnImport = document.querySelector(".confirm-button.mdc-button");

// // botão arrastar dimension / drop or select dimension [ROW]
// var btnDropDimension = document.querySelectorAll(
//   ".with-row-controls .dropzone-box-droppable-container .droppable-element"
// )[0];
// var btnDropMetric = document.querySelectorAll(
//   ".with-row-controls .dropzone-box-droppable-container"
// )[1];
